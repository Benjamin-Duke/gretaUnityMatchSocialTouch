/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace thrift.gen_csharp
{
#if !SILVERLIGHT
    [Serializable]
#endif
    public class Message : TBase
    {
        public Isset __isset;
        private List<ThriftAnimParamFrame> _APFrameList;
        private byte[] _binary_content;
        private long _firstFrameNumber;
        private string _id;
        private long _lastFrameNumber;
        private Dictionary<string, string> _properties;
        private string _string_content;
        private long _time;
        private string _type;

        public string Type
        {
            get => _type;
            set
            {
                __isset.type = true;
                _type = value;
            }
        }

        public string Id
        {
            get => _id;
            set
            {
                __isset.id = true;
                _id = value;
            }
        }

        public long Time
        {
            get => _time;
            set
            {
                __isset.time = true;
                _time = value;
            }
        }

        public List<ThriftAnimParamFrame> APFrameList
        {
            get => _APFrameList;
            set
            {
                __isset.APFrameList = true;
                _APFrameList = value;
            }
        }

        public string String_content
        {
            get => _string_content;
            set
            {
                __isset.string_content = true;
                _string_content = value;
            }
        }

        public byte[] Binary_content
        {
            get => _binary_content;
            set
            {
                __isset.binary_content = true;
                _binary_content = value;
            }
        }

        public Dictionary<string, string> Properties
        {
            get => _properties;
            set
            {
                __isset.properties = true;
                _properties = value;
            }
        }

        public long FirstFrameNumber
        {
            get => _firstFrameNumber;
            set
            {
                __isset.firstFrameNumber = true;
                _firstFrameNumber = value;
            }
        }

        public long LastFrameNumber
        {
            get => _lastFrameNumber;
            set
            {
                __isset.lastFrameNumber = true;
                _lastFrameNumber = value;
            }
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop) break;
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                            Type = iprot.ReadString();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 2:
                        if (field.Type == TType.String)
                            Id = iprot.ReadString();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 3:
                        if (field.Type == TType.I64)
                            Time = iprot.ReadI64();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 4:
                        if (field.Type == TType.List)
                        {
                            APFrameList = new List<ThriftAnimParamFrame>();
                            var _list4 = iprot.ReadListBegin();
                            for (var _i5 = 0; _i5 < _list4.Count; ++_i5)
                            {
                                var _elem6 = new ThriftAnimParamFrame();
                                _elem6 = new ThriftAnimParamFrame();
                                _elem6.Read(iprot);
                                APFrameList.Add(_elem6);
                            }

                            iprot.ReadListEnd();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }

                        break;
                    case 5:
                        if (field.Type == TType.String)
                            String_content = iprot.ReadString();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 6:
                        if (field.Type == TType.String)
                            Binary_content = iprot.ReadBinary();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 7:
                        if (field.Type == TType.Map)
                        {
                            Properties = new Dictionary<string, string>();
                            var _map7 = iprot.ReadMapBegin();
                            for (var _i8 = 0; _i8 < _map7.Count; ++_i8)
                            {
                                string _key9;
                                string _val10;
                                _key9 = iprot.ReadString();
                                _val10 = iprot.ReadString();
                                Properties[_key9] = _val10;
                            }

                            iprot.ReadMapEnd();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }

                        break;
                    case 8:
                        if (field.Type == TType.I64)
                            FirstFrameNumber = iprot.ReadI64();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 9:
                        if (field.Type == TType.I64)
                            LastFrameNumber = iprot.ReadI64();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }

                iprot.ReadFieldEnd();
            }

            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            var struc = new TStruct("Message");
            oprot.WriteStructBegin(struc);
            var field = new TField();
            if (Type != null && __isset.type)
            {
                field.Name = "type";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Type);
                oprot.WriteFieldEnd();
            }

            if (Id != null && __isset.id)
            {
                field.Name = "id";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Id);
                oprot.WriteFieldEnd();
            }

            if (__isset.time)
            {
                field.Name = "time";
                field.Type = TType.I64;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(Time);
                oprot.WriteFieldEnd();
            }

            if (APFrameList != null && __isset.APFrameList)
            {
                field.Name = "APFrameList";
                field.Type = TType.List;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, APFrameList.Count));
                    foreach (var _iter11 in APFrameList) _iter11.Write(oprot);
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }

            if (String_content != null && __isset.string_content)
            {
                field.Name = "string_content";
                field.Type = TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(String_content);
                oprot.WriteFieldEnd();
            }

            if (Binary_content != null && __isset.binary_content)
            {
                field.Name = "binary_content";
                field.Type = TType.String;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(Binary_content);
                oprot.WriteFieldEnd();
            }

            if (Properties != null && __isset.properties)
            {
                field.Name = "properties";
                field.Type = TType.Map;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
                    foreach (var _iter12 in Properties.Keys)
                    {
                        oprot.WriteString(_iter12);
                        oprot.WriteString(Properties[_iter12]);
                    }

                    oprot.WriteMapEnd();
                }
                oprot.WriteFieldEnd();
            }

            if (__isset.firstFrameNumber)
            {
                field.Name = "firstFrameNumber";
                field.Type = TType.I64;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(FirstFrameNumber);
                oprot.WriteFieldEnd();
            }

            if (__isset.lastFrameNumber)
            {
                field.Name = "lastFrameNumber";
                field.Type = TType.I64;
                field.ID = 9;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(LastFrameNumber);
                oprot.WriteFieldEnd();
            }

            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            var sb = new StringBuilder("Message(");
            sb.Append("Type: ");
            sb.Append(Type);
            sb.Append(",Id: ");
            sb.Append(Id);
            sb.Append(",Time: ");
            sb.Append(Time);
            sb.Append(",APFrameList: ");
            sb.Append(APFrameList);
            sb.Append(",String_content: ");
            sb.Append(String_content);
            sb.Append(",Binary_content: ");
            sb.Append(Binary_content);
            sb.Append(",Properties: ");
            sb.Append(Properties);
            sb.Append(",FirstFrameNumber: ");
            sb.Append(FirstFrameNumber);
            sb.Append(",LastFrameNumber: ");
            sb.Append(LastFrameNumber);
            sb.Append(")");
            return sb.ToString();
        }
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool type;
            public bool id;
            public bool time;
            public bool APFrameList;
            public bool string_content;
            public bool binary_content;
            public bool properties;
            public bool firstFrameNumber;
            public bool lastFrameNumber;
        }
    }
}