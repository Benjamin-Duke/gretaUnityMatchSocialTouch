/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace thrift.gen_csharp
{
    /// <summary>
    ///     Structs are the basic complex data structures. They are comprised of fields
    ///     which each have an integer identifier, a type, a symbolic name, and an
    ///     optional default value.
    ///     Fields can be declared "optional", which ensures they will not be included
    ///     in the serialized output if they aren't set.  Note that this requires some
    ///     manual management in some languages.
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public class ThriftAnimParam : TBase
    {
        public Isset __isset;
        private bool _mask;
        private int _value;

        public bool Mask
        {
            get => _mask;
            set
            {
                __isset.mask = true;
                _mask = value;
            }
        }

        public int Value
        {
            get => _value;
            set
            {
                __isset.value = true;
                _value = value;
            }
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop) break;
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.Bool)
                            Mask = iprot.ReadBool();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    case 2:
                        if (field.Type == TType.I32)
                            Value = iprot.ReadI32();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }

                iprot.ReadFieldEnd();
            }

            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            var struc = new TStruct("ThriftAnimParam");
            oprot.WriteStructBegin(struc);
            var field = new TField();
            if (__isset.mask)
            {
                field.Name = "mask";
                field.Type = TType.Bool;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(Mask);
                oprot.WriteFieldEnd();
            }

            if (__isset.value)
            {
                field.Name = "value";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(Value);
                oprot.WriteFieldEnd();
            }

            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            var sb = new StringBuilder("ThriftAnimParam(");
            sb.Append("Mask: ");
            sb.Append(Mask);
            sb.Append(",Value: ");
            sb.Append(Value);
            sb.Append(")");
            return sb.ToString();
        }
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool mask;
            public bool value;
        }
    }
}