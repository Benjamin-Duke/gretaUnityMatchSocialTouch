/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Thrift;
using Thrift.Protocol;

namespace thrift.gen_csharp
{
    public class SimpleCom
    {
        /// <summary>
        ///     Ahh, now onto the cool part, defining a service. Services just need a name
        ///     and can optionally inherit from another service using the extends keyword.
        /// </summary>
        public interface Iface
        {
            /// <summary>
            ///     A method definition looks like C code. It has a return type, arguments,
            ///     and optionally a list of exceptions that it may throw. Note that argument
            ///     lists and exception lists are specified using the exact same syntax as
            ///     field lists in struct or exception definitions.
            /// </summary>
            bool isStarted();
#if SILVERLIGHT
      IAsyncResult Begin_isStarted(AsyncCallback callback, object state, );
      bool End_isStarted(IAsyncResult asyncResult);
#endif
            void send(Message m);
#if SILVERLIGHT
      IAsyncResult Begin_send(AsyncCallback callback, object state, Message m);
      void End_send(IAsyncResult asyncResult);
#endif
        }

        /// <summary>
        ///     Ahh, now onto the cool part, defining a service. Services just need a name
        ///     and can optionally inherit from another service using the extends keyword.
        /// </summary>
        public class Client : Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol => iprot_;
            public TProtocol OutputProtocol => oprot_;


#if SILVERLIGHT
      public IAsyncResult Begin_isStarted(AsyncCallback callback, object state, )
      {
        return send_isStarted(callback, state);
      }

      public bool End_isStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isStarted();
      }

#endif

            /// <summary>
            ///     A method definition looks like C code. It has a return type, arguments,
            ///     and optionally a list of exceptions that it may throw. Note that argument
            ///     lists and exception lists are specified using the exact same syntax as
            ///     field lists in struct or exception definitions.
            /// </summary>
            public bool isStarted()
            {
#if !SILVERLIGHT
                send_isStarted();
                return recv_isStarted();

#else
        var asyncResult = Begin_isStarted(null, null, );
        return End_isStarted(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_isStarted(AsyncCallback callback, object state, )
#else
            public void send_isStarted()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("isStarted", TMessageType.Call, seqid_));
                var args = new isStarted_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_isStarted()
            {
                var msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    var x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }

                var result = new isStarted_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) return result.Success;
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                    "isStarted failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_send(AsyncCallback callback, object state, Message m)
      {
        return send_send(callback, state, m);
      }

      public void End_send(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_send();
      }

#endif

            public void send(Message m)
            {
#if !SILVERLIGHT
                send_send(m);
                recv_send();

#else
        var asyncResult = Begin_send(null, null, m);
        End_send(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_send(AsyncCallback callback, object state, Message m)
#else
            public void send_send(Message m)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("send", TMessageType.Call, seqid_));
                var args = new send_args();
                args.M = m;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public void recv_send()
            {
                var msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    var x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }

                var result = new send_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
            }
        }

        public class Processor : TProcessor
        {
            private readonly Iface iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public Processor(Iface iface)
            {
                iface_ = iface;
                processMap_["isStarted"] = isStarted_Process;
                processMap_["send"] = send_Process;
            }

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    var msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        var x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod,
                            "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }

                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }

                return true;
            }

            public void isStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new isStarted_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new isStarted_result();
                result.Success = iface_.isStarted();
                oprot.WriteMessageBegin(new TMessage("isStarted", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void send_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new send_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new send_result();
                iface_.send(args.M);
                oprot.WriteMessageBegin(new TMessage("send", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public class isStarted_args : TBase
        {
            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) break;
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }

                    iprot.ReadFieldEnd();
                }

                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("isStarted_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                var sb = new StringBuilder("isStarted_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public class isStarted_result : TBase
        {
            public Isset __isset;
            private bool _success;

            public bool Success
            {
                get => _success;
                set
                {
                    __isset.success = true;
                    _success = value;
                }
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) break;
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                                Success = iprot.ReadBool();
                            else
                                TProtocolUtil.Skip(iprot, field.Type);
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }

                    iprot.ReadFieldEnd();
                }

                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("isStarted_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                var sb = new StringBuilder("isStarted_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }
        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public class send_args : TBase
        {
            public Isset __isset;
            private Message _m;

            public Message M
            {
                get => _m;
                set
                {
                    __isset.m = true;
                    _m = value;
                }
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) break;
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                M = new Message();
                                M.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }

                    iprot.ReadFieldEnd();
                }

                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("send_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (M != null && __isset.m)
                {
                    field.Name = "m";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    M.Write(oprot);
                    oprot.WriteFieldEnd();
                }

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                var sb = new StringBuilder("send_args(");
                sb.Append("M: ");
                sb.Append(M == null ? "<null>" : M.ToString());
                sb.Append(")");
                return sb.ToString();
            }
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool m;
            }
        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public class send_result : TBase
        {
            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) break;
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }

                    iprot.ReadFieldEnd();
                }

                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("send_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                var sb = new StringBuilder("send_result(");
                sb.Append(")");
                return sb.ToString();
            }
        }
    }
}