/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace thrift.gen_csharp
{
#if !SILVERLIGHT
    [Serializable]
#endif
    public class ThriftAnimParamFrame : TBase
    {
        public Isset __isset;
        private List<ThriftAnimParam> _animParamList;
        private int _frameNumber;

        public List<ThriftAnimParam> AnimParamList
        {
            get => _animParamList;
            set
            {
                __isset.animParamList = true;
                _animParamList = value;
            }
        }

        public int FrameNumber
        {
            get => _frameNumber;
            set
            {
                __isset.frameNumber = true;
                _frameNumber = value;
            }
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop) break;
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            AnimParamList = new List<ThriftAnimParam>();
                            var _list0 = iprot.ReadListBegin();
                            for (var _i1 = 0; _i1 < _list0.Count; ++_i1)
                            {
                                var _elem2 = new ThriftAnimParam();
                                _elem2 = new ThriftAnimParam();
                                _elem2.Read(iprot);
                                AnimParamList.Add(_elem2);
                            }

                            iprot.ReadListEnd();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }

                        break;
                    case 2:
                        if (field.Type == TType.I32)
                            FrameNumber = iprot.ReadI32();
                        else
                            TProtocolUtil.Skip(iprot, field.Type);
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }

                iprot.ReadFieldEnd();
            }

            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            var struc = new TStruct("ThriftAnimParamFrame");
            oprot.WriteStructBegin(struc);
            var field = new TField();
            if (AnimParamList != null && __isset.animParamList)
            {
                field.Name = "animParamList";
                field.Type = TType.List;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, AnimParamList.Count));
                    foreach (var _iter3 in AnimParamList) _iter3.Write(oprot);
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }

            if (__isset.frameNumber)
            {
                field.Name = "frameNumber";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(FrameNumber);
                oprot.WriteFieldEnd();
            }

            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            var sb = new StringBuilder("ThriftAnimParamFrame(");
            sb.Append("AnimParamList: ");
            sb.Append(AnimParamList);
            sb.Append(",FrameNumber: ");
            sb.Append(FrameNumber);
            sb.Append(")");
            return sb.ToString();
        }
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool animParamList;
            public bool frameNumber;
        }
    }
}